'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');
class workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.description = `${this.type[0].toUppercase()}${[
      this.type.slice(1),
    ]} on ${this.date.getMonth()} ${this.date.getDate()}`;
  }
}
class Running extends workout {
  type = 'running';

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }
  calcPace() {
    //min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}
class Cycling extends workout {
  type = 'cycling';
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    //km
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycling1 = new Cycling([39, -12], 27.2, 54, 578);
// console.log(run1, cycling1);
//////////////////////////////////////////
/////app arci
class App {
  #map;
  #mapEvent;
  #workout = [];
  constructor() {
    this._getposition();
    form.addEventListener('submit', this._newWorkout.bind(this));
    inputType.addEventListener('change', this._toggleElevationField);
  }
  _getposition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('could not get your posititon');
        }
      );
  }
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},18z?entry=ttu`
    );
    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, 10);
    console.log(this);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    this.#map.on('click', this._showForm.bind(this));
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    const vaildinputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));
    const allPos = (...inputs) => inputs.every(inp => inp > 0);
    e.preventDefault();

    ///////////////////
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    //////////////////

    //////////////////
    if (type === 'running') {
      const cadence = +inputCadence.value;
      if (
        !vaildinputs(distance, duration, cadence) ||
        !allPos(distance, duration, cadence)
      )
        return alert('inputs have to be positive');
      workout = new Running([lat, lng], distance, duration, cadence);
    }

    //////////////////
    if (type === 'cycling') {
      const elevation = +inputCadence.value;
      if (
        !vaildinputs(distance, duration, elevation) ||
        !allPos(distance, duration)
      )
        return alert('inputs have to be positive');
      workout = new Cycling([lat, lng], distance, duration, elevation);
    }
    //////////////////
    this.#workout.push(workout);
    console.log(workout);

    //////////////////
    this._renderWorkoutMarker(workout);

    ///
    this._renderWorkout(workout);

    //////////////////

    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';
    ////////
  }
  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map) ///im getting  error here
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent('workout')
      .openPopup();
  }
  _renderWorkout(workout) {
    const html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö≤'
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">km</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">min</span>
    </div>`;

    if (workout.type === 'running')
      html += `<div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">4.6</span>
      <span class="workout__unit">min/km</span>
     </div>
     <div class="workout__details">
       <span class="workout__icon">ü¶∂üèº</span>
       <span class="workout__value">178</span>
       <span class="workout__unit">spm</span>
     </div>
     </li>`;
  }
}

const app = new App();
